#Part 1: Define the Database
CREATE TABLE LOCATION(
	Loc_ID INT NOT NULL AUTO_INCREMENT, 
	Bldg_Code VARCHAR(4) NOT NULL, 
	Room VARCHAR(4) NOT NULL, 
	Capacity INT NOT NULL,
	PRIMARY KEY (Loc_Id)
);

CREATE TABLE TERM(
	Term_ID INT NOT NULL AUTO_INCREMENT, 
	Term_Desc VARCHAR(15) NOT NULL, 
	Status VARCHAR(15) NOT NULL, 
	Start_Date VARCHAR(10) NOT NULL,
	PRIMARY KEY (Term_ID)
);

CREATE TABLE FACULTY(
	F_ID INT NOT NULL,
	F_Last VARCHAR(15) NOT NULL,
	F_First VARCHAR(15) NOT NULL,
	F_Mi VARCHAR(1),
	Loc_ID INT NOT NULL,
	F_Phone VARCHAR(11) UNIQUE,
	F_Rank VARCHAR(15) NOT NULL,
	F_Super INT,
	F_Pin VARCHAR(4) NOT NULL,
	PRIMARY KEY (F_ID),
	FOREIGN KEY (Loc_ID) REFERENCES LOCATION (Loc_ID),
	FOREIGN KEY (F_Super) REFERENCES FACULTY (F_ID)
		ON DELETE SET NULL
		ON UPDATE CASCADE
);

CREATE TABLE STUDENT(
	S_ID INT NOT NULL AUTO_INCREMENT,
	S_Last VARCHAR(15) NOT NULL,
	S_First VARCHAR(15) NOT NULL,
	S_Mi VARCHAR(1),
	S_Address VARCHAR(30) NOT NULL,
	S_City VARCHAR(15) NOT NULL,
	S_State VARCHAR(2) NOT NULL,
	S_Zip VARCHAR(5) NOT NULL,
	S_Phone VARCHAR(11) UNIQUE,
	S_DOB VARCHAR(10) NOT NULL,
	S_Pin VARCHAR(4) NOT NULL,
	F_ID INT,
	Date_Enrolled VARCHAR(10) NOT NULL,
	PRIMARY KEY (S_ID),
	FOREIGN KEY (F_ID) REFERENCES faculty(F_ID)
		ON DELETE SET NULL
		ON UPDATE CASCADE
);

CREATE TABLE COURSE(
	Course_ID INT NOT NULL AUTO_INCREMENT,
	Course_No VARCHAR(15) NOT NULL,
	Course_name VARCHAR(30) NOT NULL,
	Credits INT NOT NULL,
	PRIMARY KEY (Course_ID),
	CHECK (Credits > 0)
);

CREATE TABLE COURSE_SECTION(
	C_Sec_ID INT NOT NULL AUTO_INCREMENT,
	Course_ID INT NOT NULL,
	Term_ID INT NOT NULL,
	Sec_Num INT NOT NULL,
	F_ID INT NOT NULL, 
	C_Sec_Day VARCHAR(6), 
	C_Sec_Start VARCHAR(10) NOT NULL,
	C_Sec_End VARCHAR(10) NOT NULL, 
	Loc_ID INT, 
	Max_Enrl INT NOT NULL,
	PRIMARY KEY (C_Sec_ID),
	FOREIGN KEY (Course_ID) REFERENCES COURSE (Course_ID)
		ON UPDATE CASCADE,
	FOREIGN KEY (Term_ID) REFERENCES TERM (Term_ID)
		ON UPDATE CASCADE,
	FOREIGN KEY (F_ID) REFERENCES FACULTY (F_ID)
		ON UPDATE CASCADE,
	FOREIGN KEY (Loc_ID) REFERENCES LOCATION (Loc_ID)
		ON UPDATE CASCADE
);

CREATE TABLE ENROLLMENT(
	S_ID INT NOT NULL, 
	C_Sec_ID INT NOT NULL, 
	Grade VARCHAR(2),
	PRIMARY KEY (S_ID,C_Sec_ID),
	FOREIGN KEY (C_Sec_ID) REFERENCES COURSE_SECTION (C_Sec_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

#Part 2: Populate the Database
LOAD DATA INFILE 'C:\location.txt' INTO TABLE LOCATION 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET Loc_ID = Null;
LOAD DATA INFILE 'C:\term.txt' INTO TABLE TERM 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET Term_ID = Null;
LOAD DATA INFILE 'C:\faculty.txt' INTO TABLE FACULTY 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET F_ID = Null;
LOAD DATA INFILE 'C:\student.txt' INTO TABLE STUDENT 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET S_ID = Null;
LOAD DATA INFILE 'C:\course.txt' INTO TABLE COURSE 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET Course_ID = Null;
LOAD DATA INFILE 'C:\course_section.txt' INTO TABLE COURSE_SECTION 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n' SET C_Sec_ID = Null;
LOAD DATA INFILE 'C:\enrollment.txt' INTO TABLE ENROLLMENT 
	FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n';

#Part 3: Test the referential integrity constraints of the Database
##3.a
INSERT INTO COURSE_SECTION
VALUES(12, 2, 6, 2, 2, 'MTWRF', '10:00 AM', '11:30 AM', 5, 35);
INSERT INTO COURSE_SECTION
VALUES(12, 2, 6, 2, 2, 'MTWRF', '9:00 AM', '10:30 AM', 6, 35);
INSERT INTO COURSE_SECTION
VALUES(2, 1, 4, 2, 3, 'TR', '9:30 AM', '10:45 AM', 4, 35);
##3.b
INSERT INTO Faculty
VALUES(4, 'Brown', 'Colin', 'D', 11, '3253456789', 'Assistant', 4, 9871);
INSERT INTO Faculty
VALUES(6, 'Reeves', 'Bob', 'S', 15, '3256789012', 'Full',  '', 1234);
INSERT INTO Faculty
VALUES(6, 'Reeves', 'Bob', 'S', 10, '3256789012', 'Assistant', 7, 1234);

INSERT INTO Faculty
VALUES(6, 'Reeves', 'Bob', 'S', 10, '3255678901', 'Assistant', 2, 1234);

##3.c
INSERT INTO COURSE
VALUES(4, 'CS 120', 'Intro. to Programming in C++', 3);
##3.d
DELETE FROM LOCATION WHERE Loc_ID = 11;

##3.e
DELETE FROM TERM WHERE Term_ID = 4;

#Part 4: Basic SQL Queries
##a    Doesn't work
SELECT S_ID, S_Last, S_First FROM STUDENT WHERE S_ID IN
(SELECT S_ID FROM ENROLLMENT WHERE Grade ='A' OR Grade = 'B');

##b
SELECT TERM_DESC FROM TERM WHERE TERM_DESC LIKE '%2007%';

##c
SELECT BLDG_CODE, ROOM, CAPACITY FROM LOCATION
order by BLDG_CODE, ROOM;

##d
SELECT COURSE_NO, COURSE_NAME, CREDITS*730.00 AS COST FROM COURSE;

##e    Doesn't Work
SELECT COUNT(MAX_ENRL), AVG(MAX_ENRL), MAX(MAX_ENRL), MIN(MAX_ENRL) FROM COURSE_SECTION WHERE TERM_ID IN 
(SELECT TERM_ID FROM TERM WHERE TERM_DESC = 'Summer 2008')
GROUP BY MAX_ENRL;

##f
SELECT COUNT(C_Sec_ID) from ENROLLMENT WHERE GRADE != ' ' AND S_ID IN
(SELECT S_ID FROM STUDENT WHERE S_First = 'Lisa' AND S_Last = 'Johnson');

##g
SELECT BLDG_CODE, CAPACITY FROM LOCATION
WHERE CAPACITY > 100
GROUP BY BLDG_CODE;

##h
SELECT A.S_ID, A.S_LAST, A.S_FIRST, A.F_ID, B.F_LAST
FROM STUDENT AS A, FACUlTY AS B
WHERE A.F_ID = B.F_ID; 

##i  Doesn't Work
SELECT A.F_LAST
FROM FACULTY AS A, COURSE_SECTION AS B, TERM AS C
WHERE A.F_ID = B.F_ID AND B.TERM_ID = C.TERM_ID AND C.TERM_DESC ='Summer 2008';

##j
SELECT A.COURSE_NAME, B.GRADE
FROM COURSE AS A, ENROLLMENT AS B, STUDENT AS C, COURSE_SECTION AS D
WHERE B.C_SEC_ID = D.C_SEC_ID AND D.COURSE_ID = A.COURSE_ID 
AND B.S_ID = C.S_ID AND C.S_LAST = 'Jones' AND C.S_FIRST = 'Tammy';

##k  Works, but no way to distinguish students and teachers
SELECT S_LAST, S_FIRST, S_PHONE FROM STUDENT UNION SELECT F_LAST, F_FIRST, F_PHONE FROM FACULTY;

#Part 5: Advanced SQL Queries
##a
SELECT S_FIRST, S_LAST FROM STUDENT WHERE S_CLASS = 
(SELECT S_CLASS FROM STUDENT WHERE S_FIRST = 'Jorge' AND S_LAST = 'Perez');

##b
SELECT S_FIRST, S_LAST FROM STUDENT WHERE S_ID IN 
(SELECT S_ID FROM ENROLLMENT WHERE C_SEC_ID IN
(SELECT C_SEC_ID FROM ENROLLMENT WHERE S_ID = 2));

##c
SELECT S_FIRST, S_LAST FROM STUDENT WHERE S_CLASS = 
(SELECT S_CLASS FROM STUDENT WHERE S_FIRST = 'Jorge' AND S_LAST = 'Perez')
AND S_ID IN 
(SELECT S_ID FROM ENROLLMENT WHERE C_SEC_ID IN
(SELECT C_SEC_ID FROM ENROLLMENT WHERE S_ID = 2));

##d  Doesn't Work
SELECT S_FIRST, S_LAST FROM STUDENT WHERE S_ID IN
(SELECT S_ID FROM ENROLLMENT WHERE C_SEC_ID IN
(SELECT C_SEC_ID FROM ENROLLMENT WHERE S_ID = 2)
AND C_SEC_ID IN
(SELECT C_SEC_ID FROM COURSE_SECTION WHERE LOC_ID IN
(SELECT LOC_ID FROM LOCATION WHERE BLDG_CODE = 'CR')));

##e
SELECT COURSE_NAME FROM COURSE WHERE COURSE_ID IN
(SELECT COURSE_ID FROM COURSE_SECTION WHERE C_SEC_ID IN
(SELECT C_SEC_ID FROM ENROLLMENT WHERE S_ID IN
(SELECT S_ID FROM STUDENT WHERE S_CLASS != 'Senior')))
UNION
SELECT COURSE_NAME FROM COURSE WHERE COURSE_ID IN
(SELECT TERM_ID FROM COURSE_SECTION WHERE TERM_ID = 6);

##f Doesn't work; figuring out how to simulate intersect in MySQL
SELECT COURSE_NAME FROM COURSE WHERE COURSE_ID IN
(SELECT COURSE_ID FROM COURSE_SECTION WHERE C_SEC_ID IN
(SELECT C_SEC_ID FROM ENROLLMENT WHERE S_ID IN
(SELECT S_ID FROM STUDENT WHERE S_CLASS != 'Senior')))

SELECT COURSE_NAME FROM COURSE WHERE COURSE_ID IN
(SELECT TERM_ID FROM COURSE_SECTION WHERE TERM_ID = 6);

##g
